[
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card",
    "section": "",
    "text": "We use numbers to represent suits and ranks.\n\nsuits\n\n['❤️', '♦️', '♠️', '♣️']\n\n\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\nChoice examples:\n\nsuit=0 is a heart.\nsuit=1 is a diamond.\nrank=2 is a 2.\nrank=1 is an Ace.\nrank=0 is None (there are no zeros in playing cards).\n\n\n\n\n\n Card (suit:int, rank:int)\n\nA playing card.\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\nFor example, here’s the Ace of Hearts:\n\nCard(suit=0, rank=1)\n\nA❤️"
  },
  {
    "objectID": "card.html#card-comparison-operators",
    "href": "card.html#card-comparison-operators",
    "title": "card",
    "section": "Card comparison operators",
    "text": "Card comparison operators\nComparisons work by comparing (suit, rank) tuples.\nBy python convention, tuple comparisons start by checking first elements, then second elements. So, equality requires both the suit and the rank to be equal, but less than and greater than will return a result after only checking the suit if the suits are different.\nEquality tests (both elements equal):\n\nassert Card(suit=1, rank=2) == Card(suit=1, rank=2)\nassert Card(suit=1, rank=1) != Card(suit=0, rank=0)\nassert Card(suit=1, rank=2) != Card(suit=1, rank=1)\n\nLess than tests (first checks suit, then checks rank):\n\nassert Card(suit=1, rank=1) < Card(suit=1, rank=2)\nassert Card(suit=1, rank=3) < Card(suit=2, rank=1)\nassert Card(suit=2, rank=3) < Card(suit=3, rank=1)\n\nGreater than tests (first checks suit, then checks rank):\n\nassert not Card(suit=1, rank=1) > Card(suit=1, rank=2)\nassert not Card(suit=1, rank=3) > Card(suit=2, rank=1)\nassert not Card(suit=2, rank=3) > Card(suit=3, rank=2)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-cards",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eu arcu hendrerit, aliquam tortor sit amet, viverra metus. Praesent quis orci porta, blandit sem nec, dictum ex. Sed semper hendrerit quam, vitae consequat metus pulvinar ac.\nAenean cursus euismod velit, non eleifend ipsum tincidunt vitae. Etiam rutrum pretium convallis. Donec non ornare justo. Curabitur viverra sed libero sed faucibus. Curabitur a leo facilisis, egestas quam vel, porttitor diam.\n\n\nInstall using:\npip install your_project_name\nOr:\nconda install -c fastai nbdev-cards\n\n\n\nThis lib provides the Card and Deck classes you can use to create and compare standard playing cards.\n\nCard(1,3)\n\n3♦️\n\n\nSuits and ranks are numbered according to these lists:\n\nsuits\n\n['❤️', '♦️', '♠️', '♣️']\n\n\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "Deck\n\n Deck ()\n\nA deck of 52 cards (no jokers).\nLet’s create and view a deck.\n\nd = Deck(); d\n\nA❤️ 2❤️ 3❤️ 4❤️ 5❤️ 6❤️ 7❤️ 8❤️ 9❤️ 10❤️ J❤️ Q❤️ K❤️ A♦️ 2♦️ 3♦️ 4♦️ 5♦️ 6♦️ 7♦️ 8♦️ 9♦️ 10♦️ J♦️ Q♦️ K♦️ A♠️ 2♠️ 3♠️ 4♠️ 5♠️ 6♠️ 7♠️ 8♠️ 9♠️ 10♠️ J♠️ Q♠️ K♠️ A♣️ 2♣️ 3♣️ 4♣️ 5♣️ 6♣️ 7♣️ 8♣️ 9♣️ 10♣️ J♣️ Q♣️ K♣️\n\n\nIt contains 52 Card objects (including the ace of hearts).\n\ntest_eq(len(Deck()), 52)\n\ntest_eq(Card(1,1) in Deck(), True)\n\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove (defaults to the last one)\n\n\n\nPopping a fresh deck will return the king of spades.\n\ntest_eq(Deck().pop(), Card(3,13))\n\n\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemove card from the deck or raise an exception if it isn’t there.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nThe index of the card to remove (defaults to the last one)\n\n\n\n\ncard23 = Card(2, 3)\nd.remove(card23)\n\nassert card23 not in d"
  }
]